/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.windea.plugin.idea.bbcode.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static com.windea.plugin.idea.bbcode.psi.BBCodeTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>BBCodeLexer.flex</tt>
 */
public class BBCodeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_TAG_PREFIX = 2;
  public static final int WAITING_TAG_PREFIX_END = 4;
  public static final int WAITING_ATTRIBUTES = 6;
  public static final int WAITING_ATTRIBUTE_NAME = 8;
  public static final int WAITING_EQUAL_SIGN = 10;
  public static final int WAITING_ATTRIBUTE_VALUE = 12;
  public static final int WAITING_SINGLE_ATTRIBUTE_VALUE = 14;
  public static final int WAITING_TAG_BODY = 16;
  public static final int WAITING_TAG_SUFFIX = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\12\1\13\34"+
    "\12\1\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12"+
    "\1\4\1\12\1\23\1\4\1\12\1\24\1\4\1\12\1\25\1\26\1\12\1\6\1\27\1\1\1\6\4\12"+
    "\1\30\6\12\1\31\1\32\1\33\1\1\3\12\1\34\6\12\1\15\3\12\1\35\2\12\1\36\1\1"+
    "\1\12\1\37\4\1\1\12\1\40\1\1\1\41\1\21\7\12\1\42\1\4\1\31\1\43\1\32\1\44\1"+
    "\45\1\46\1\42\1\15\1\47\1\43\1\32\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\32"+
    "\1\56\1\57\1\60\1\42\1\61\1\62\1\43\1\32\1\56\1\63\1\64\1\42\1\65\1\66\1\67"+
    "\1\70\1\30\1\71\1\72\1\53\1\1\1\73\1\74\1\32\1\75\1\76\1\77\1\42\1\1\1\73"+
    "\1\74\1\32\1\100\1\76\1\101\1\42\1\102\1\103\1\74\1\12\1\34\1\104\1\105\1"+
    "\42\1\106\1\107\1\110\1\12\1\111\1\112\1\113\1\53\1\114\1\4\2\12\1\6\1\115"+
    "\1\116\2\1\1\117\1\120\1\121\1\122\1\123\1\124\2\1\1\60\1\125\1\116\1\126"+
    "\1\127\1\12\1\130\1\4\1\131\1\127\1\12\1\130\1\132\3\1\4\12\1\116\4\12\1\36"+
    "\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135\2\12\1\137\1\140\1\13"+
    "\3\12\1\140\3\12\1\34\2\1\1\12\1\1\5\12\1\141\1\4\45\12\1\33\1\12\1\142\1"+
    "\6\4\12\1\143\1\144\1\145\1\146\1\12\1\146\1\12\1\147\1\145\1\150\5\12\1\151"+
    "\1\116\1\1\1\152\1\116\5\12\1\24\2\12\1\6\4\12\1\54\1\12\1\115\2\37\1\53\1"+
    "\12\1\36\1\146\2\12\1\37\1\12\2\116\2\1\1\12\1\37\3\12\1\115\1\12\1\33\2\116"+
    "\1\153\1\115\4\1\4\12\1\37\1\116\1\154\1\147\7\12\1\147\3\12\1\24\1\75\2\12"+
    "\1\36\1\144\4\1\1\155\1\12\1\156\17\12\1\157\21\12\1\141\2\12\1\141\1\160"+
    "\1\12\1\36\3\12\1\161\1\162\1\163\1\130\1\162\1\164\1\1\1\165\1\166\1\60\1"+
    "\167\1\1\1\170\1\1\1\130\3\1\2\12\1\60\1\171\1\172\1\173\1\124\1\174\1\1\2"+
    "\12\1\144\62\1\1\53\2\12\1\116\161\1\2\12\1\115\2\12\1\115\10\12\1\175\1\147"+
    "\2\12\1\133\3\12\1\176\1\166\1\12\1\177\4\200\2\12\2\1\1\166\35\1\1\201\1"+
    "\1\1\4\1\202\1\4\4\12\1\203\1\4\4\12\1\134\1\204\1\12\1\36\1\4\4\12\1\115"+
    "\1\1\1\12\1\6\3\1\1\12\40\1\133\12\1\54\4\1\135\12\1\54\2\1\10\12\1\130\4"+
    "\1\2\12\1\36\20\12\1\130\1\12\1\37\1\1\3\12\1\205\7\12\1\15\1\1\1\206\1\207"+
    "\5\12\1\210\1\12\1\115\1\24\3\1\1\206\2\12\1\24\1\1\3\12\1\147\4\12\1\54\1"+
    "\116\1\12\1\211\2\12\1\36\2\12\1\147\1\12\1\130\4\12\1\212\1\116\1\12\1\115"+
    "\3\12\1\177\1\36\1\116\1\12\1\110\4\12\1\27\1\152\1\12\1\213\1\214\1\215\1"+
    "\200\2\12\1\134\1\54\7\12\1\216\1\116\72\12\1\147\1\12\1\217\2\12\1\37\20"+
    "\1\26\12\1\36\6\12\1\116\2\1\1\177\1\220\1\32\1\221\1\222\6\12\1\15\1\1\1"+
    "\223\25\12\1\36\1\1\4\12\1\207\2\12\1\24\2\1\1\37\1\12\1\1\1\12\1\224\1\225"+
    "\2\1\1\131\7\12\1\130\1\1\1\116\1\4\1\226\1\4\1\6\1\53\4\12\1\115\1\227\1"+
    "\230\2\1\1\231\1\12\1\13\1\232\2\36\2\1\7\12\1\6\4\1\3\12\1\146\7\1\1\233"+
    "\10\1\1\12\1\130\3\12\2\60\1\1\2\12\1\1\1\12\1\6\2\12\1\6\1\12\1\36\2\12\1"+
    "\234\1\235\2\1\11\12\1\36\1\116\2\12\1\234\1\12\1\37\2\12\1\24\3\12\1\147"+
    "\11\1\23\12\1\177\1\12\1\54\1\24\11\1\1\236\2\12\1\237\1\12\1\54\1\12\1\177"+
    "\1\12\1\115\4\1\1\12\1\240\1\12\1\54\1\12\1\116\4\1\3\12\1\241\4\1\1\242\1"+
    "\243\1\12\1\244\2\1\1\12\1\130\1\12\1\130\2\1\1\127\1\12\1\177\1\1\3\12\1"+
    "\54\1\12\1\54\1\12\1\27\1\12\1\15\6\1\4\12\1\144\3\1\3\12\1\27\3\12\1\27\60"+
    "\1\4\12\1\177\1\1\1\53\1\166\3\12\1\6\1\1\1\12\1\144\1\116\3\12\1\131\1\1"+
    "\2\12\1\245\4\12\1\246\1\247\2\1\1\12\1\21\1\12\1\250\4\1\1\251\1\25\1\144"+
    "\3\12\1\6\1\116\1\31\1\43\1\32\1\56\1\63\1\252\1\253\1\146\10\1\4\12\1\6\1"+
    "\116\2\1\4\12\1\254\1\116\12\1\3\12\1\255\1\60\1\256\2\1\4\12\1\257\1\116"+
    "\2\1\3\12\1\24\1\116\3\1\1\12\1\75\1\37\1\116\26\1\4\12\1\116\1\166\34\1\3"+
    "\12\1\144\20\1\1\32\2\12\1\13\1\60\1\116\1\1\1\207\1\12\1\207\1\127\1\177"+
    "\64\1\71\12\1\116\6\1\6\12\1\115\1\1\14\12\1\147\53\1\2\12\1\115\75\1\44\12"+
    "\1\177\33\1\43\12\1\144\1\12\1\115\1\116\6\1\1\12\1\36\1\146\3\12\1\177\1"+
    "\147\1\116\1\223\1\260\1\12\67\1\4\12\1\146\2\12\1\115\1\166\1\12\4\1\1\60"+
    "\1\1\76\12\1\130\1\1\57\12\1\27\20\1\1\15\77\1\6\12\1\6\1\130\1\144\1\261"+
    "\114\1\1\262\1\263\1\264\1\1\1\265\11\1\1\266\33\1\5\12\1\131\3\12\1\145\1"+
    "\267\1\270\1\271\3\12\1\272\1\273\1\12\1\274\1\275\1\74\24\12\1\255\1\12\1"+
    "\74\1\134\1\12\1\134\1\12\1\131\1\12\1\131\1\115\1\12\1\115\1\12\1\32\1\12"+
    "\1\32\1\12\1\276\3\12\40\1\3\12\1\217\2\12\1\130\1\277\1\300\1\154\1\4\25"+
    "\1\1\13\1\210\1\301\75\1\14\12\1\146\1\177\2\1\4\12\1\6\1\116\112\1\1\271"+
    "\1\12\1\302\1\303\1\304\1\305\1\306\1\307\1\310\1\37\1\311\1\37\47\1\1\12"+
    "\1\116\1\12\1\116\1\12\1\116\47\1\55\12\1\177\2\1\103\12\1\146\15\12\1\36"+
    "\150\12\1\15\25\1\41\12\1\36\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3232 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\11\0\1\2\2\0\1\2\1\0\1\6\12\2\3\0\1\5\3\0\32\2\1\4\1\0"+
    "\1\3\1\0\14\2\12\0\1\1\12\0\1\1\11\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\12"+
    "\2\4\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1"+
    "\2\1\0\3\2\1\0\1\2\1\0\4\2\1\0\23\2\1\0\20\2\2\0\1\2\6\0\10\2\10\0\16\2\1"+
    "\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2\10\0\3\2\15\0\12\2\4\0\6\2\1\0\10\2\2\0\12"+
    "\2\1\0\23\2\2\0\14\2\2\0\11\2\4\0\1\2\5\0\16\2\2\0\14\2\4\0\5\2\1\0\10\2\6"+
    "\0\20\2\2\0\13\2\2\0\16\2\1\0\1\2\3\0\4\2\2\0\11\2\2\0\2\2\2\0\4\2\10\0\1"+
    "\2\4\0\2\2\1\0\1\2\1\0\3\2\1\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\2"+
    "\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\2\1\0\1\2\7\0\20\2\13\0\3\2\1\0\11"+
    "\2\1\0\2\2\1\0\2\2\1\0\5\2\2\0\12\2\1\0\3\2\1\0\3\2\2\0\1\2\30\0\1\2\7\0\3"+
    "\2\1\0\10\2\2\0\6\2\2\0\2\2\2\0\3\2\10\0\2\2\4\0\2\2\1\0\1\2\1\0\1\2\20\0"+
    "\2\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0\5"+
    "\2\3\0\3\2\1\0\4\2\2\0\1\2\6\0\1\2\10\0\4\2\1\0\10\2\1\0\3\2\1\0\30\2\3\0"+
    "\10\2\1\0\3\2\1\0\4\2\7\0\2\2\1\0\3\2\5\0\4\2\1\0\5\2\2\0\4\2\5\0\2\2\7\0"+
    "\1\2\2\0\2\2\16\0\3\2\1\0\10\2\1\0\7\2\1\0\3\2\1\0\5\2\5\0\4\2\7\0\1\2\12"+
    "\0\6\2\2\0\2\2\1\0\22\2\3\0\10\2\1\0\11\2\1\0\1\2\2\0\7\2\3\0\1\2\4\0\6\2"+
    "\1\0\1\2\1\0\10\2\2\0\2\2\14\0\17\2\1\0\12\2\7\0\2\2\1\0\1\2\2\0\2\2\1\0\1"+
    "\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\15\2\1\0\3"+
    "\2\2\0\5\2\1\0\1\2\1\0\6\2\2\0\12\2\2\0\4\2\10\0\2\2\13\0\1\2\1\0\1\2\1\0"+
    "\1\2\4\0\12\2\1\0\24\2\3\0\5\2\1\0\12\2\6\0\1\2\11\0\6\2\1\0\1\2\5\0\1\2\2"+
    "\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2\1"+
    "\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\1\1\32\2\3\0\13\2\7\0\15\2\1\0\7\2\13"+
    "\0\4\2\14\0\1\2\1\0\2\2\14\0\4\2\3\0\1\2\4\0\2\2\15\0\3\2\11\0\1\2\23\0\10"+
    "\2\1\0\23\2\1\0\2\2\6\0\6\2\5\0\15\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7"+
    "\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0\13\1\15\0\2\1\5\0\1\1\17\0"+
    "\1\2\4\0\1\2\12\0\1\1\1\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3"+
    "\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\1\2\5\0\5\2\4\0\1\2\1\0\5\2\6\0"+
    "\15\2\7\0\10\2\11\0\7\2\1\0\7\2\1\0\1\1\4\0\3\2\11\0\5\2\2\0\5\2\3\0\7\2\2"+
    "\0\2\2\2\0\3\2\5\0\16\2\1\0\12\2\1\0\1\2\7\0\11\2\2\0\27\2\2\0\15\2\3\0\1"+
    "\2\1\0\1\2\2\0\1\2\16\0\1\2\2\0\5\2\12\0\6\2\2\0\6\2\2\0\6\2\11\0\13\2\1\0"+
    "\2\2\2\0\7\2\4\0\5\2\3\0\5\2\5\0\12\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\12\2\3\0\15\2\3\0\2\2\30\0\16\2\4\0\1\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3"+
    "\0\14\2\1\0\16\2\1\0\2\2\1\0\1\2\15\0\1\2\2\0\4\2\4\0\10\2\1\0\5\2\12\0\6"+
    "\2\2\0\1\2\1\0\14\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0"+
    "\2\2\5\0\10\2\1\0\3\2\1\0\13\2\4\0\3\2\4\0\5\2\2\0\1\2\11\0\5\2\5\0\3\2\3"+
    "\0\13\2\1\0\1\2\3\0\10\2\6\0\1\2\1\0\7\2\1\0\1\2\1\0\4\2\1\0\2\2\6\0\1\2\5"+
    "\0\7\2\2\0\7\2\3\0\6\2\1\0\1\2\10\0\6\2\2\0\10\2\10\0\6\2\2\0\1\2\3\0\1\2"+
    "\13\0\10\2\5\0\15\2\3\0\2\2\6\0\5\2\3\0\6\2\10\0\10\2\2\0\7\2\16\0\4\2\4\0"+
    "\3\2\15\0\1\2\2\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2"+
    "\0\10\2\1\0\7\2\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\11\2\1\0\10\2\2\0\2\2"+
    "\5\0\1\2\16\0\1\2\13\0\2\2\1\0\2\2\1\0\5\2\6\0\2\2\1\0\1\2\2\0\1\2\1\0\12"+
    "\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2"+
    "\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1"+
    "\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\0\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[27];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\7\0\16\0\25\0\34\0\43\0\52\0\61"+
    "\0\70\0\77\0\106\0\115\0\124\0\124\0\133\0\142"+
    "\0\124\0\151\0\124\0\124\0\160\0\167\0\176\0\205"+
    "\0\124\0\106\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[27];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\13\1\15\1\16\2\13\1\15\1\17"+
    "\1\20\1\21\4\15\1\17\1\15\1\21\4\15\1\17"+
    "\1\22\1\21\1\15\1\23\2\15\1\17\1\22\1\21"+
    "\4\15\1\17\1\15\1\21\1\15\1\24\1\15\1\25"+
    "\1\17\1\25\1\21\1\15\2\25\1\26\1\17\1\26"+
    "\1\21\1\15\2\26\1\13\1\14\1\13\1\15\1\27"+
    "\2\13\1\15\1\17\1\30\1\31\3\15\1\13\1\32"+
    "\1\13\2\0\3\13\1\14\1\13\2\0\2\13\10\0"+
    "\1\17\7\0\1\20\6\0\1\22\4\0\1\25\1\0"+
    "\1\25\2\0\2\25\1\26\1\0\1\26\2\0\2\26"+
    "\6\0\1\33\2\0\1\30\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\1\2\11\2\1\1\11\1\1\2\11\4\1"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[27];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BBCodeLexer() {
    this((java.io.Reader)null);
  }
  int depth = 0;

  public int nextState(){
  	if(depth <= 0) return YYINITIAL;
  	else return WAITING_TAG_BODY;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BBCodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TEXT_TOKEN;
            } 
            // fall through
          case 16: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 17: break;
          case 3: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 18: break;
          case 4: 
            { depth++; yybegin(WAITING_TAG_PREFIX); return TAG_PREFIX_START;
            } 
            // fall through
          case 19: break;
          case 5: 
            { yybegin(WAITING_ATTRIBUTES); return TAG_NAME;
            } 
            // fall through
          case 20: break;
          case 6: 
            { yybegin(WAITING_TAG_BODY); return TAG_PREFIX_END;
            } 
            // fall through
          case 21: break;
          case 7: 
            { yybegin(WAITING_EQUAL_SIGN); return ATTRIBUTE_NAME;
            } 
            // fall through
          case 22: break;
          case 8: 
            { yybegin(WAITING_SINGLE_ATTRIBUTE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 23: break;
          case 9: 
            { yybegin(WAITING_ATTRIBUTE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 24: break;
          case 10: 
            { yybegin(WAITING_ATTRIBUTE_NAME); return ATTRIBUTE_VALUE;
            } 
            // fall through
          case 25: break;
          case 11: 
            { yybegin(WAITING_TAG_PREFIX_END); return ATTRIBUTE_VALUE;
            } 
            // fall through
          case 26: break;
          case 12: 
            { yybegin(WAITING_TAG_PREFIX); return TAG_PREFIX_START;
            } 
            // fall through
          case 27: break;
          case 13: 
            { return TAG_NAME;
            } 
            // fall through
          case 28: break;
          case 14: 
            { depth--; yybegin(nextState()); return TAG_SUFFIX_END;
            } 
            // fall through
          case 29: break;
          case 15: 
            { yybegin(WAITING_TAG_SUFFIX); return TAG_SUFFIX_START;
            } 
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
