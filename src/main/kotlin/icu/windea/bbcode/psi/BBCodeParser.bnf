{
  parserClass="icu.windea.bbcode.psi.BBCodeParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="BBCode"
  psiImplClassSuffix="Impl"
  psiPackage="icu.windea.bbcode.psi"
  psiImplPackage="icu.windea.bbcode.psi.impl"
  elementTypeHolderClass="icu.windea.bbcode.psi.BBCodeTypes"
  tokenTypeClass="icu.windea.bbcode.psi.BBCodeTokenType"
  elementTypeClass="icu.windea.bbcode.psi.BBCodeElementType"
  psiImplUtilClass="icu.windea.bbcode.psi.impl.BBCodePsiImplUtil"
  parserUtilClass="icu.windea.bbcode.psi.BBCodeParserUtil"

  parserImports=[
    "static com.intellij.lang.WhitespacesBinders.*"
  ]

  tokens=[
    TAG_NAME='regexp:[\w*\-_]+'
    ATTRIBUTE_NAME='regexp:[\w*\-_]+'
    ATTRIBUTE_VALUE_TOKEN='regexp:([^=\[\]\s\"][^=\[\]\s]*)|(\"([^\"\\]|\\.)*\"?)'
    TEXT_TOKEN='regexp:([^\[\]\s]|\\\S)+'
  ]
}

root ::= (tag | text) *

tag ::= tag_prefix (<<isIncompleteTag>> | <<isInlineTag>> | <<isLineTag>> tag_body | tag_body tag_suffix) ? {
  pin=1
  mixin="icu.windea.bbcode.psi.impl.BBCodeNamedElementImpl"
  implements=[
    "icu.windea.bbcode.psi.BBCodeNamedElement"
    "com.intellij.psi.ContributedReferenceHost"
  ]
  methods=[getIcon getName setName getNameIdentifier getTextOffset getValue getReferences]
}

private tag_prefix ::= TAG_PREFIX_START <<putTagName>> TAG_NAME attributes? (TAG_PREFIX_END | EMPTY_TAG_PREFIX_END) {
  pin=1
}
private tag_body ::= (tag | text) *
private tag_suffix ::= TAG_SUFFIX_START TAG_NAME TAG_SUFFIX_END {
  pin=1
}

private attributes ::= simple_attribute | attribute_group
private simple_attribute ::= EQUAL_SIGN attribute_value {
  pin=1
}
private attribute_group ::= attribute +

attribute ::= ATTRIBUTE_NAME EQUAL_SIGN attribute_value {
  pin=1
  mixin="icu.windea.bbcode.psi.impl.BBCodeNamedElementImpl"
  implements=[
    "icu.windea.bbcode.psi.BBCodeNamedElement"
    "com.intellij.psi.ContributedReferenceHost"
  ]
  methods=[getName setName getNameIdentifier getTextOffset getValue getReferences]
}
attribute_value ::= ATTRIBUTE_VALUE_TOKEN {
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue]
}

text ::= TEXT_TOKEN + {
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue]
  hooks=[wsBinders="GREEDY_LEFT_BINDER, GREEDY_RIGHT_BINDER"]
}
