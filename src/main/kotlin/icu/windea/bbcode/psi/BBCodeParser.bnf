{
	parserClass="icu.windea.bbcode.psi.BBCodeParser"
	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
	psiClassPrefix="BBCode"
	psiImplClassSuffix="Impl"
	psiPackage="icu.windea.bbcode.psi"
	psiImplPackage="icu.windea.bbcode.psi.impl"
	elementTypeHolderClass="icu.windea.bbcode.psi.BBCodeTypes"
	tokenTypeClass="icu.windea.bbcode.psi.BBCodeTokenType"
	elementTypeClass="icu.windea.bbcode.psi.BBCodeElementType"
	psiImplUtilClass="icu.windea.bbcode.psi.impl.BBCodePsiImplUtil"
	parserUtilClass="icu.windea.bbcode.psi.BBCodeParserUtil"

	tokens=[
        TAG_NAME='regexp:[\w*\-_]+'
        ATTRIBUTE_NAME='regexp:[\w*\-_]+'
        ATTRIBUTE_VALUE_TOKEN='regexp:([^=\[\]\s"][^=\[\]\s]*)|("([^"\\]|\\.)*"?)'
        TEXT_TOKEN='regexp:[^\[\]\s]+'
	]
}

root ::= (tag | text)*

tag ::= (tag_prefix tag_body tag_suffix) | tag_prefix_single {
  pin=1
  mixin="icu.windea.bbcode.psi.impl.BBCodeNamedElementImpl"
  implements=[
    "icu.windea.bbcode.psi.BBCodeNamedElement"
    "com.intellij.psi.ContributedReferenceHost"
  ]
  methods=[getIcon getName setName getNameIdentifier getTextOffset getTagName getAttributes getValue getReferences]
}

private tag_prefix ::= TAG_PREFIX_START <<pushTagName>> TAG_NAME attributes? TAG_PREFIX_END {
  pin=3
}
private tag_body ::= (tag | text) *
private tag_suffix ::= TAG_SUFFIX_START <<checkTagName>> TAG_NAME TAG_SUFFIX_END {
  pin=3
}
private tag_prefix_single ::= TAG_PREFIX_START <<popTagName>>  TAG_NAME attributes? TAG_PREFIX_END {
  pin=3
}

private attributes ::= simple_attribute | attribute_group
private simple_attribute ::= EQUAL_SIGN attribute_value {
  pin=1
}
private attribute_group ::= attribute +

attribute ::= ATTRIBUTE_NAME EQUAL_SIGN attribute_value {
  pin=1
  mixin="icu.windea.bbcode.psi.impl.BBCodeNamedElementImpl"
  implements=[
    "icu.windea.bbcode.psi.BBCodeNamedElement"
    "com.intellij.psi.ContributedReferenceHost"
  ]
  methods=[getName setName getNameIdentifier getTextOffset getValue getReferences]
}
attribute_value ::= ATTRIBUTE_VALUE_TOKEN {
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue]
}

text ::= TEXT_TOKEN + {
  implements="com.intellij.psi.PsiLiteralValue"
  methods=[getValue]
}
